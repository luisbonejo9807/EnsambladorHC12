/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ensambladorhc12;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import javax.swing.JTextArea;

/**
 *
 * @author hp
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 900));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Archivo TXT");

        jLabel2.setText("Resultados");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewJFrame n = new NewJFrame();
                n.setVisible(true);
                
                String finDeArchivo = null;
                StringBuilder s = new StringBuilder();
                String FILE_NAME = "src/ensambladorhc12/P1ASM2.TXT";
                new File("src/ensambladorhc12/errores").mkdirs();

                if(!Files.exists(Paths.get(FILE_NAME)))
                    s.append(EnsambladorHC12Raw.writeError(0, "\n\tERROR: El archivo no existe"));
                else
                {
                    EnsambladorHC12Raw ensamblador = new EnsambladorHC12Raw(FILE_NAME);
                    n.getjTextArea1().setText(ensamblador.getContenidoDeArchivoTxt());
                    if(ensamblador.getContenidoDeArchivoTxt().trim().isEmpty())
                        s.append(EnsambladorHC12Raw.writeError(0, "\n\tERROR: El archivo no contiene nada"));
                    else
                    {
                        String[] lineas = ensamblador.getContenidoDeArchivo();

                        for (int i = 0; i < lineas.length; i++) 
                        {   
                             String[] palabra = ensamblador.separarEnPalabras(lineas[i]);
                             if(i == lineas.length-1 )
                             {
                                 if( palabra[0].matches("/^END$/i"))
                                 {
                                      s.append("END");
                                      break;
                                 }
                                 else
                                     finDeArchivo = EnsambladorHC12Raw.writeError(i+1, "\nERROR: El archivo no termina con END");
                             }
                             if (lineas[i].trim().isEmpty()) 
                                  s.append(EnsambladorHC12Raw.writeError(i+1, "\n\tERROR: linea Vacía"));
                             else if(ensamblador.isComentario(lineas[i])) 
                                 s.append("COMENTARIO=").append(lineas[i]).append("\n");
                             else 
                             {
                                 if(ensamblador.hasETIQUETA(lineas[i]))
                                 {
                                     ensamblador.setEtiqueta(ensamblador.validarETIQUETA(palabra[0]));
                                     if(ensamblador.getEtiqueta().contains("\tERROR: "))
                                         s.append("\n"+EnsambladorHC12Raw.writeError(i+1, ensamblador.getEtiqueta()));
                                     else
                                         s.append("\n"+ensamblador.getEtiqueta()+"\n");
                                     if(palabra.length>1)
                                         s.append(ensamblador.analizarLinea(i+1, Arrays.copyOfRange(palabra, 1, palabra.length)));
                                     else
                                     {
                                         s.append(EnsambladorHC12Raw.writeError(i+1, "CODOP = null\n\tERROR: Si existe una etiqueta debe existir otro token más"));
                                         s.append("OPERANDO = null\n");
                                     }
                                 }
                                 else
                                 {
                                     s.append("\nETIQUETA = null\n");
                                     s.append(ensamblador.analizarLinea(i+1, palabra)+"\n");
                                 }
                             }
                             if(finDeArchivo!=null)
                                 s.append(finDeArchivo);
                        }
                    }
                    n.getjTextArea2().setText(s.toString());
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables

    public javax.swing.JTextArea getjTextArea1() {
        return jTextArea1;
    }


    public void setjTextArea1(javax.swing.JTextArea jTextArea1) {
        this.jTextArea1 = jTextArea1;
    }


    public javax.swing.JTextArea getjTextArea2() {
        return jTextArea2;
    }


    public void setjTextArea2(javax.swing.JTextArea jTextArea2) {
        this.jTextArea2 = jTextArea2;
    }
}
